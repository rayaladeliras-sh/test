package com.stubhub.test.inventory;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.RandomStringUtils;


public class StringTool {

    private StringTool() {

    }

    public static class Chars {

        private Chars() {

        }

        /**
         * get random string containing only numbers
         *
         * @param length length of the random string
         * @return the string
         */
        public static String randomNumbers(int length) {
            return RandomStringUtils.randomNumeric(length);
        }

        /**
         * get random string containing only alphabets
         *
         * @param length length of the random string
         * @return the string
         */
        public static String randomAlphabets(int length) {
            return RandomStringUtils.randomAlphabetic(length);

        }

        /**
         * get the random string containing a mixture of numbers and alphabets
         *
         * @param length length of the string
         * @return the string
         */
        public static String randomAlphaNumbers(int length) {
            return RandomStringUtils.randomAlphanumeric(length);
        }
    }

    /**
     * all the email address generated by this will end with @tixqa.com
     * expect for random(int nameLength, String domain)
     */
    public static class Email {

        private Email() {

        }

        private static String email(String prefix, String name, String postfix, String domain) {
            assert prefix != null : "prefix cannot be null";
            assert name != null : "name cannot be null";
            assert postfix != null : "postfix cannot be null";
            assert domain != null : "domain cannot be null";

            return String.format("%s%s%s@%s", prefix, name, postfix, domain);
        }

        /**
         * return an random email address with the domain specified
         *
         * @param nameLength length of the email address
         * @param domain domain for this email
         * @return the email address
         */
        public static String random(int nameLength, String domain) {
            assert nameLength > 0 : "nameLength should be greater than 0";

            return email("", Chars.randomAlphaNumbers(nameLength), "", domain);
        }

        /**
         * return an email address that ends with @tixqa.com
         *
         * @param nameLength length of the email address
         * @return the email address
         */
        public static String random(int nameLength) {
            return random(nameLength, "tixqa.com");
        }

        /**
         * return an eight-letter long random email address
         *
         * @return the email address
         */
        public static String random() {
            return random(8);
        }

        public static String random(String prefix) {
            return email(prefix, Chars.randomAlphaNumbers(12), "", "tixqa.com");
        }
    }

    public static class Barcode {

        private static final String ALL_CHAR = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        private Barcode() {

        }

        public static String i2o5_12() {
            return Chars.randomNumbers(12);
        }

        public static String i2o5_14() {
            return Chars.randomNumbers(14);
        }

        public static String code128_13() {
            return Chars.randomAlphaNumbers(13);
        }

        private static String generateRandomBarcode(int vendorId) {

            String barcode = null;
            switch (vendorId) {
                case 1:
                    barcode = generateRandomBarcodeForTDC();
                    break;
                //barcode for vendor TDC

                case 2:
                    barcode = generateRandomBarcodeForPAC();
                    break;
                //barcode for vendor PAC

                case 3:
                    barcode = generateRandomBarcodeForTM();
                    break;
                //barcode for vendor TM

                case 6:
                    barcode = generateRandomBarcodeForAEG();
                    break;

                default:
                    //no default barcode
            }
            return barcode;
        }

        private static String generateRandomBarcodeForAEG() {
            return RandomStringUtils.randomNumeric(14);
        }

        private static String generateRandomBarcodeForTM() {
            String tmBarcode = null;
            Random random = new Random();
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < 12; i++) {
                sb.append(random.nextInt(10));
            }
            tmBarcode = sb.toString();
            return tmBarcode;
        }

        private static String generateRandomBarcodeForPAC() {
            String pacBarcode = null;

            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < 14; i++) {
                sb.append(random.nextInt(10));
            }

            pacBarcode = sb.toString();
            return pacBarcode;
        }

        private static String generateRandomBarcodeForTDC() {
            String tdcBarcode = null;
            Random random = new Random();
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < 12; i++) {
                if (i == 4) {
                    sb.append("-");
                }
                sb.append(ALL_CHAR.charAt(random.nextInt(ALL_CHAR.length())));
            }

            tdcBarcode = sb.toString();
            return tdcBarcode;
        }

        public static List<String> generateRandomBacodes(int vendorId, int quantity) {
            List<String> barcodeList = new ArrayList<String>();

            for (int i = 0; i < quantity; i++) {
                barcodeList.add(generateRandomBarcode(vendorId));
            }

            return barcodeList;
        }

    }

    /**
     * fetch the number in the src string
     *
     * @param src string to find in
     * @return array of all the numbers found
     * @deprecated DO NOT USE
     */
    @Deprecated
    public static String[] $fetchNum(String src) {
        Pattern pa = Pattern.compile("\\d+");
        Matcher ma = pa.matcher(src);
        List<String> res = new ArrayList<String>();
        while (ma.find()) {
            res.add(ma.group());
        }
        String[] r = new String[res.size()];
        return res.toArray(r);
    }

    /**
     * fethc the double number in the src string
     *
     * @param src string to find in
     * @return array of all the numbers found
     * @deprecated DO NOT USE
     */
    @Deprecated
    public static String[] $fetchDoubleNum(String src) {
        Pattern pa = Pattern.compile("\\d{1,3}(,?\\d{3})*(\\.(\\d{3},?)*\\d{1,3})?");
        Matcher ma = pa.matcher(src);
        List<String> res = new ArrayList<String>();
        while (ma.find()) {
            res.add(ma.group());
        }
        String[] r = new String[res.size()];
        return res.toArray(r);
    }
}
